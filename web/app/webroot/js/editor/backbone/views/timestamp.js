// Generated by CoffeeScript 1.6.1
var _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bachelor.Views.TimestampView = (function(_super) {

  __extends(TimestampView, _super);

  function TimestampView() {
    var _this = this;
    this.handleClick = function(e) {
      return TimestampView.prototype.handleClick.apply(_this, arguments);
    };
    this.render = function() {
      return TimestampView.prototype.render.apply(_this, arguments);
    };
    return TimestampView.__super__.constructor.apply(this, arguments);
  }

  TimestampView.prototype.tagName = 'div';

  TimestampView.prototype.className = 'thumbnail';

  TimestampView.prototype.id = '';

  TimestampView.prototype.events = {
    'click': 'handleClick'
  };

  TimestampView.prototype.initialize = function() {
    return this.model.view = this;
  };

  TimestampView.prototype.render = function() {
    this.setContent();
    this.appendAttachment();
    this.setOpacity();
    return this;
  };

  TimestampView.prototype.setContent = function() {
    this.attributes = {
      "data-start": this.model.get('start'),
      "data-end": this.model.get('end')
    };
    return this.$el.attr(this.attributes);
  };

  TimestampView.prototype.appendAttachment = function() {
    var type;
    this.$el.empty();
    this.attachment = this.model.get('Attachment');
    type = this.attachment.Type.name;
    if (type === 'image') {
      return this.appendImage();
    } else {
      return this.appendText();
    }
  };

  TimestampView.prototype.appendImage = function() {
    var img, thumbUrl, urlInfo;
    urlInfo = pathinfo(app.url + this.attachment.url);
    thumbUrl = urlInfo.dirname + '/thumb/' + urlInfo.basename;
    img = "<img src=\"" + thumbUrl + "\" class='thumbnail-content' />";
    return this.$el.append(img);
  };

  TimestampView.prototype.appendText = function() {
    var textDiv;
    textDiv = "<div class='text thumbnail-content'>" + this.attachment.name + "</div>";
    return this.$el.append(textDiv);
  };

  TimestampView.prototype.setOpacity = function() {
    if (this.model.isSet()) {
      return this.$el.find('.thumbnail-content').css('opacity', 0.7);
    }
  };

  TimestampView.prototype.handleClick = function(e) {
    var LEFT_CLICK, RIGHT_CLICK;
    LEFT_CLICK = 1;
    RIGHT_CLICK = 3;
    if (e.which === LEFT_CLICK) {
      this.toggleStartEnd();
    }
    if (e.which === RIGHT_CLICK) {
      return this.showContext();
    }
  };

  TimestampView.prototype.toggleStartEnd = function() {
    var blockCid, currentTime;
    if (this.model.get('status')) {
      return;
    }
    currentTime = Bachelor.App.pop.popcorn.currentTime();
    if (!this.model.get('timing')) {
      blockCid = this.model.get('blockCid');
      Bachelor.App.Views.blocksRowsView.setAllTimestampsTimingEnd(blockCid, currentTime);
      return this.setTimingStart(currentTime);
    } else {
      return this.setTimingEnd(currentTime);
    }
  };

  TimestampView.prototype.setTimingStart = function(currentTime) {
    this.model.set('timing', true);
    this.model.set('start', currentTime);
    return this.$el.toggleClass('timing');
  };

  TimestampView.prototype.setTimingEnd = function(currentTime) {
    if (currentTime == null) {
      currentTime = Bachelor.App.pop.popcorn.currentTime();
    }
    this.model.set('timing', false);
    this.model.set('end', currentTime);
    this.model.set('status', true);
    this.$el.toggleClass('timing');
    this.render();
    return this.addTimestampToPopcorn();
  };

  TimestampView.prototype.addTimestampToPopcorn = function() {
    var timestamp, type;
    type = this.model.get('Attachment').Type.name;
    timestamp = this.model.attributes;
    if (type === 'image') {
      Bachelor.App.pop.addPopcornImage(timestamp);
    }
    if (type === 'text') {
      return Bachelor.App.pop.addPopcornText(timestamp);
    }
  };

  TimestampView.prototype.showContext = function() {
    return debug('showContext');
  };

  return TimestampView;

})(Backbone.View);
