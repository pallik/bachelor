// Generated by CoffeeScript 1.6.1
var _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bachelor.Views.BlocksRowsView = (function(_super) {

  __extends(BlocksRowsView, _super);

  function BlocksRowsView() {
    var _this = this;
    this.disableAllTimestampsDraggable = function(blockCid) {
      return BlocksRowsView.prototype.disableAllTimestampsDraggable.apply(_this, arguments);
    };
    this.setAllTimestampsTimingEnd = function(blockCid, currentTime) {
      return BlocksRowsView.prototype.setAllTimestampsTimingEnd.apply(_this, arguments);
    };
    this.setTimestampStatusFalse = function(blockCid) {
      return BlocksRowsView.prototype.setTimestampStatusFalse.apply(_this, arguments);
    };
    this.renderAllTimestamps = function() {
      return BlocksRowsView.prototype.renderAllTimestamps.apply(_this, arguments);
    };
    this.addTimestampView = function(timestamp) {
      return BlocksRowsView.prototype.addTimestampView.apply(_this, arguments);
    };
    this.addBlockRowView = function(block) {
      return BlocksRowsView.prototype.addBlockRowView.apply(_this, arguments);
    };
    return BlocksRowsView.__super__.constructor.apply(this, arguments);
  }

  BlocksRowsView.prototype.el = $('.blocks-rows');

  BlocksRowsView.prototype.initialize = function() {
    Bachelor.App.Collections.blocks.on('add', this.addBlockRowView);
    Bachelor.App.Collections.timestamps.on('add', this.addTimestampView);
    Backbone.Events.on('renderAllTimestamps', this.renderAllTimestamps);
    return Backbone.Events.on('setTimestampFalse', this.setTimestampStatusFalse);
  };

  BlocksRowsView.prototype.addBlockRowView = function(block) {
    var view;
    if (!block.isMasterVideo()) {
      view = new Bachelor.Views.BlockRowView({
        model: block
      });
      return this.$el.append(view.render().el);
    }
  };

  BlocksRowsView.prototype.addTimestampView = function(timestamp) {
    var view;
    view = new Bachelor.Views.TimestampView({
      model: timestamp
    });
    return this.appendTimestampViewToBlockRow(timestamp);
  };

  BlocksRowsView.prototype.appendTimestampViewToBlockRow = function(timestamp) {
    var $blockRow, blockCid, view;
    view = timestamp.view;
    blockCid = timestamp.get('blockCid');
    $blockRow = this.$el.find(".block-row[data-block-cid=" + blockCid + "]");
    return $blockRow.append(view.render().el);
  };

  BlocksRowsView.prototype.renderAllTimestamps = function() {
    var _this = this;
    Bachelor.App.Collections.timestamps.sort();
    return _.each(Bachelor.App.Collections.timestamps.models, function(timestamp) {
      return _this.appendTimestampViewToBlockRow(timestamp);
    });
  };

  BlocksRowsView.prototype.setTimestampStatusFalse = function(blockCid) {
    return _.each(Bachelor.App.Collections.timestamps.where({
      blockCid: blockCid
    }), function(timestamp) {
      return timestamp.set('status', false);
    });
  };

  BlocksRowsView.prototype.setAllTimestampsTimingEnd = function(blockCid, currentTime) {
    return _.each(Bachelor.App.Collections.timestamps.where({
      blockCid: blockCid,
      status: false,
      timing: true
    }), function(timestamp) {
      return timestamp.view.setTimingEnd(currentTime);
    });
  };

  BlocksRowsView.prototype.disableAllTimestampsDraggable = function(blockCid) {
    return _.each(Bachelor.App.Collections.timestamps.where({
      blockCid: blockCid,
      highlight: true
    }), function(timestamp) {
      return timestamp.view.disableDraggable();
    });
  };

  return BlocksRowsView;

})(Backbone.View);
