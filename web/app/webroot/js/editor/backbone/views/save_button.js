// Generated by CoffeeScript 1.6.1
var _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bachelor.Views.SaveButtonView = (function(_super) {

  __extends(SaveButtonView, _super);

  function SaveButtonView() {
    var _this = this;
    this.refreshLesson = function(e) {
      return SaveButtonView.prototype.refreshLesson.apply(_this, arguments);
    };
    this.onError = function(returnedData) {
      return SaveButtonView.prototype.onError.apply(_this, arguments);
    };
    this.onTimestampsSuccess = function(returnedData) {
      return SaveButtonView.prototype.onTimestampsSuccess.apply(_this, arguments);
    };
    this.onBlocksSuccess = function(returnedData) {
      return SaveButtonView.prototype.onBlocksSuccess.apply(_this, arguments);
    };
    this.saveLesson = function(e) {
      return SaveButtonView.prototype.saveLesson.apply(_this, arguments);
    };
    return SaveButtonView.__super__.constructor.apply(this, arguments);
  }

  SaveButtonView.prototype.el = $('.save-lesson');

  SaveButtonView.prototype.events = {
    'click .save-button': 'saveLesson',
    'click .refresh-lesson': 'refreshLesson'
  };

  SaveButtonView.prototype.saveLesson = function(e) {
    var blocks, blocksAjaxUrl, blocksData;
    e.preventDefault();
    blocks = Bachelor.App.Collections.blocks.filter(function(block) {
      block.set('cid', block.cid);
      return true;
    });
    blocksData = JSON.stringify(blocks);
    blocksAjaxUrl = Bachelor.App.Collections.blocks.url + "/saveAll";
    return ajaxPost(blocksAjaxUrl, blocksData, this.onBlocksSuccess, this.onError);
  };

  SaveButtonView.prototype.onBlocksSuccess = function(returnedData) {
    var timestampsAjaxUrl, timestampsData, timestampsFinished;
    timestampsFinished = Bachelor.App.Collections.timestamps.filter(function(timestamp) {
      var block;
      block = _.find(returnedData.blocks, function(block) {
        return block.cid === timestamp.get('blockCid');
      });
      if (block.id != null) {
        timestamp.set('block_id', block.id);
      }
      if (block.insertedId != null) {
        timestamp.set('block_id', block.insertedId);
      }
      if (timestamp.get('timing')) {
        timestamp.view.setTimingEnd();
      }
      return timestamp.get('status');
    });
    timestampsData = JSON.stringify(timestampsFinished);
    timestampsAjaxUrl = Bachelor.App.Collections.timestamps.url + "/saveAll";
    return ajaxPost(timestampsAjaxUrl, timestampsData, this.onTimestampsSuccess, this.onError);
  };

  SaveButtonView.prototype.onTimestampsSuccess = function(returnedData) {
    var nextUrl;
    if (returnedData.success) {
      nextUrl = this.$el.find('.save-button').attr('href');
      return window.location.href = nextUrl;
    }
  };

  SaveButtonView.prototype.onError = function(returnedData) {
    return debug(returnedData);
  };

  SaveButtonView.prototype.refreshLesson = function(e) {
    e.preventDefault();
    return window.location.href = app.request.here;
  };

  return SaveButtonView;

})(Backbone.View);
