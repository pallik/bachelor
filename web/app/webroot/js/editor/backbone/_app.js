// Generated by CoffeeScript 1.6.1

this.Bachelor.App = {
  lessonId: Bachelor.lessonId,
  pop: null,
  blocksData: null,
  Models: {
    lesson: null
  },
  Collections: {
    blocks: null,
    timestamps: null,
    attachments: null
  },
  Views: {
    addButtonsView: null,
    blocksView: null,
    blocksRowsView: null,
    chaptersView: null,
    timelineView: null,
    saveButtonView: null
  },
  create: function() {
    this.Models.lesson = new Bachelor.Models.Lesson({
      id: this.lessonId
    });
    return this.Models.lesson.bind('change', this.init, this);
  },
  init: function() {
    this.data = this.Models.lesson.get('data');
    this.Collections.blocks = new Bachelor.Collections.Blocks();
    this.Collections.timestamps = new Bachelor.Collections.Timestamps();
    this.Collections.attachments = new Bachelor.Collections.Attachments();
    this.Views.blocksRowsView = new Bachelor.Views.BlocksRowsView();
    this.Views.blocksView = new Bachelor.Views.BlocksView();
    this.Views.addButtonsView = new Bachelor.Views.AddButtonsView();
    this.Views.timelineView = new Bachelor.Views.TimelineView();
    this.Views.saveButtonView = new Bachelor.Views.SaveButtonView();
    this.Views.chaptersView = new Bachelor.Views.ChaptersView();
    this.addBlocksToCollection();
    this.addTimestampsToCollection();
    return this.initPopcorn();
  },
  getRelatedData: function(model) {
    return this.data[model];
  },
  addBlocksToCollection: function() {
    this.blocksData = this.getRelatedData('Block');
    return this.Collections.blocks.add(this.blocksData);
  },
  addTimestampsToCollection: function() {
    var _this = this;
    _.each(this.blocksData, function(block) {
      var blockCid, blockId, blockModel;
      blockId = block.id;
      blockModel = _this.Collections.blocks.get(blockId);
      blockCid = blockModel.cid;
      return _.each(block.Timestamp, function(timestamp) {
        timestamp.blockCid = blockCid;
        return _this.Collections.timestamps.add(timestamp);
      });
    });
    this.Collections.timestamps.each(function(timestamp) {
      return timestamp.set('status', true);
    });
    return Backbone.Events.trigger('renderAllTimestamps');
  },
  initPopcorn: function() {
    var blocks;
    this.createPopcornInstance();
    blocks = this.getRelatedData('Block');
    this.pop.addPopcornElements(blocks);
    return this.pop.editorsInit();
  },
  createPopcornInstance: function() {
    var attachment, videoUrl;
    attachment = this.getRelatedData('Attachment');
    videoUrl = attachment.url;
    return this.pop = new Pop(videoUrl);
  }
};
